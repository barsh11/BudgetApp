{"version":3,"sources":["utils/sumSpecMonth.ts","components/organisms/ActivitiesChart/ActivitiesChart.tsx","components/organisms/CategoriesChart/CategoriesChart.tsx","components/organisms/ExpensesChart/ExpensesChart.tsx","components/organisms/MethodsChart/MethodsChart.tsx","views/pages/Charts/Charts.tsx"],"names":["sumSpecMonth","currMonth","currYear","type","stats","sum","currTransaction","get","undefined","expenses","incomes","cancelled","SWrapper","styled","div","ActivitiesChart","className","location","useContext","StatsContext","app","AppContext","transactionsList","DataContext","useState","dates","setDates","series","setSeries","chart","height","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","legend","position","stroke","show","tooltip","x","xaxis","title","text","categories","yaxis","getCurrencySymbol","currency","min","fill","opacity","colors","options","setOptions","useEffect","size","length","newDates","firstDate","moment","date","i","currDate","toDate","subtract","format","push","slice","xaxisLab","map","curr","join","cur","name","data","toFixed","Typography","variant","color","id","align","CategoriesChart","setCategories","width","labels","isActive","useRef","newCategories","forEach","includes","category","current","convertCurrency","parseFloat","amount","currencyRates","purchases","ExpensesChart","Map","setExpenses","getState","useCallback","expensesDaily","lastDate","dateStr","isAfter","isBefore","transactionType","set","Array","from","keys","newExpenses","sort","a","b","diff","MethodsChart","paypal","nonPaypal","methods","setMethods","startingShape","barHeight","rangeBarOverlap","rangeBarGroupRows","axisBorder","axisTicks","crosshairs","gradient","colorFrom","colorTo","stops","opacityFrom","opacityTo","newMethods","SActivitiesChart","Charts"],"mappings":"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","file":"static/js/19.a83b15a8.chunk.js","sourcesContent":["import { statsProps } from '../contexts/StatsContext';\n\nconst sumSpecMonth = (currMonth: string, currYear: string, type: string, stats: statsProps): number => {\n  let sum: number = 0;\n\n  const currTransaction = stats.get(`${currYear}_${currMonth}`);\n  if (currTransaction !== undefined) {\n    switch (type) {\n      case 'expenses':\n        sum += currTransaction.expenses;\n        break;\n      case 'incomes':\n        sum += currTransaction.incomes;\n        break;\n      default:\n        sum += currTransaction.cancelled;\n    }\n  }\n\n  return sum;\n};\n\nexport default sumSpecMonth;\n","import React, { useEffect, useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { Typography } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport { StatsContext } from '../../../contexts/StatsContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { DataContext } from '../../../contexts/DataContext';\nimport sumSpecMonth from '../../../utils/sumSpecMonth';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  grid-column: 1 / -1;\n  justify-self: stretch;\n  align-self: center;\n\n  width: 100%;\n  height: 100%;\n  background-color: var(--color-white);\n  padding: 2rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media only screen and (max-width: 37.5em) {\n    display: none;\n  }\n`;\n\nconst ActivitiesChart: React.FC<{ className?: string; location: 'charts' | 'dashboard' }> = ({\n  className,\n  location,\n}) => {\n  const stats = useContext(StatsContext);\n  const app = useContext(AppContext);\n  const transactionsList = useContext(DataContext);\n  const [dates, setDates] = useState<[string, string][]>([]);\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'bar',\n      height: '100%',\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '50%',\n        endingShape: 'rounded',\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    legend: {\n      position: 'top',\n    },\n    stroke: {\n      show: false,\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      title: {\n        text: 'month',\n      },\n      categories: [] as string[],\n    },\n    yaxis: {\n      title: {\n        text: `${getCurrencySymbol(app.currency)}`,\n        categories: [],\n      },\n      min: 0,\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: ['#FF7B7D', '#199FE6', '#3A2D96'],\n  });\n\n  useEffect(() => {\n    if (stats.size && transactionsList.length) {\n      const newDates: [string, string][] = [];\n      const firstDate = moment(transactionsList[0].date, 'MM/DD/YYYY');\n\n      for (let i = 0; i < stats.size; i += 1) {\n        const currDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(i, 'months');\n        const currMonth: string = currDate.format('MMM');\n        const currYear: string = currDate.format('YYYY');\n\n        newDates.push([currMonth, currYear]);\n      }\n\n      setDates(newDates.slice());\n      const xaxisLab: string[] = newDates.map((curr) => curr.join(' '));\n      setOptions({ ...options, xaxis: { ...options.xaxis, categories: xaxisLab } });\n    }\n  }, [stats]);\n\n  useEffect(() => {\n    if (dates.length) {\n      const cancelled = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'cancelled', stats));\n      const expenses = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'expenses', stats));\n      const incomes = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'incomes', stats));\n\n      setSeries([\n        {\n          name: 'Cancelled',\n          data: cancelled.map((cur) => cur.toFixed(2)),\n        },\n        {\n          name: 'Expenses',\n          data: expenses.map((cur) => cur.toFixed(2)),\n        },\n        {\n          name: 'Incomes',\n          data: incomes.map((cur) => cur.toFixed(2)),\n        },\n      ]);\n    }\n  }, [dates]);\n\n  return (\n    <SWrapper className={className}>\n      {location === 'dashboard' ? (\n        <Typography variant=\"h5\" color=\"textSecondary\">\n          Activities\n        </Typography>\n      ) : null}\n      <div id=\"chart\">\n        <Chart\n          options={\n            location === 'dashboard'\n              ? { ...options }\n              : { ...options, title: { text: 'Last 6 months activities', align: 'center' } }\n          }\n          series={series.slice()}\n          type=\"bar\"\n        />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default ActivitiesChart;\n","import React, { useEffect, useState, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport Chart from 'react-apexcharts';\nimport { DataContext } from '../../../contexts/DataContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport convertCurrency from '../../../utils/convertCurrency';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  grid-column: 1 / span 1;\n\n  width: 100%;\n  background-color: var(--color-white);\n  padding: 1rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  justify-content: center;\n\n  @media only screen and (min-width: 75em) {\n    grid-column: 1 / span 2;\n  }\n`;\n\nconst CategoriesChart: React.FC = () => {\n  const app = useContext(AppContext);\n  const transactionsList = useContext(DataContext).slice(0, 40);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'pie',\n      width: '100%',\n    },\n    title: {\n      text: `Purchases in ${getCurrencySymbol(app.currency)} by category`,\n      align: 'center',\n    },\n    labels: [] as string[],\n    legend: {\n      show: false,\n    },\n  });\n\n  const isActive = useRef(true);\n  useEffect(() => {\n    const newCategories: string[] = [];\n\n    if (transactionsList.length) {\n      transactionsList.forEach((cur) => {\n        if (!newCategories.includes(cur.category)) {\n          newCategories.push(cur.category);\n        }\n      });\n\n      if (isActive.current) {\n        setCategories(newCategories);\n        setOptions({ ...options, labels: newCategories });\n      }\n    }\n\n    return () => {\n      isActive.current = false;\n    };\n  }, [transactionsList]);\n\n  useEffect(() => {\n    if (categories) {\n      const newCategories: { [category: string]: number } = {};\n      categories.forEach((cur) => {\n        newCategories[cur] = 0;\n      });\n      transactionsList.forEach((cur) => {\n        newCategories[cur.category] += convertCurrency(\n          parseFloat(cur.amount),\n          cur.currency,\n          app.currency,\n          app.currencyRates\n        );\n      });\n      const purchases: number[] = categories.map((cur) => newCategories[cur]);\n      setSeries(purchases);\n    }\n  }, [categories]);\n\n  return (\n    <SWrapper>\n      <div id=\"chart\">\n        <Chart options={{ ...options }} series={series} type=\"pie\" />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default CategoriesChart;\n","import React, { useEffect, useState, useCallback, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Chart from 'react-apexcharts';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { DataContext } from '../../../contexts/DataContext';\nimport convertCurrency from '../../../utils/convertCurrency';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  grid-column: 1 / -1;\n  justify-self: stretch;\n  align-self: center;\n\n  width: 100%;\n  background-color: var(--color-white);\n  padding: 1rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  @media only screen and (min-width: 75em) {\n    grid-column: 1 / span 2;\n    grid-row: 2 / span 1;\n    align-self: stretch;\n  }\n`;\n\nconst ExpensesChart: React.FC = () => {\n  const app = useContext(AppContext);\n  const transactionsList = useContext(DataContext);\n  const [expenses, setExpenses] = useState<Map<string, number>>(new Map());\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'area',\n      height: '100%',\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      width: 1,\n    },\n    title: {\n      text: `Last month expenses`,\n      align: 'center',\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      categories: [] as string[],\n    },\n    yaxis: {\n      title: {\n        text: `${getCurrencySymbol(app.currency)}`,\n        categories: [],\n      },\n      min: 0,\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: ['#3A2D96'],\n  });\n\n  const getState = useCallback(\n    (isActive: boolean) => {\n      const expensesDaily: Map<string, number> = new Map();\n\n      if (transactionsList.length) {\n        const firstDate = moment(transactionsList[0].date, 'MM/DD/YYYY');\n        const lastDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(1, 'months');\n        let i: number = 0;\n\n        for (i; i < transactionsList.length; i += 1) {\n          const currDate = moment(transactionsList[i].date, 'MM/DD/YYYY');\n          const dateStr = currDate.format('DD/MM/YY');\n          if (\n            currDate.isAfter(lastDate) &&\n            currDate.isBefore(firstDate) &&\n            transactionsList[i].transactionType === 'expense'\n          ) {\n            if (expensesDaily.get(dateStr) === undefined) {\n              expensesDaily.set(\n                dateStr,\n                convertCurrency(\n                  parseFloat(transactionsList[i].amount),\n                  transactionsList[i].currency,\n                  app.currency,\n                  app.currencyRates\n                )\n              );\n            } else {\n              expensesDaily.set(\n                dateStr,\n                expensesDaily.get(dateStr)! +\n                  convertCurrency(\n                    parseFloat(transactionsList[i].amount),\n                    transactionsList[i].currency,\n                    app.currency,\n                    app.currencyRates\n                  )\n              );\n            }\n          }\n        }\n        if (isActive) {\n          setExpenses(expensesDaily);\n        }\n      }\n    },\n    [transactionsList]\n  );\n\n  const isActive = useRef(true);\n  useEffect(() => {\n    getState(isActive.current);\n\n    return () => {\n      isActive.current = false;\n    };\n  }, [getState]);\n\n  useEffect(() => {\n    if (expenses.size) {\n      let dates = Array.from(expenses.keys());\n      dates = dates.sort((a, b) => moment(a, 'DD/MM/YY').diff(moment(b, 'DD/MM/YY')));\n      const newExpenses = dates.map((cur) => expenses.get(cur)!);\n\n      setSeries([\n        {\n          name: 'Expenses',\n          data: newExpenses.map((cur) => cur.toFixed(2)),\n        },\n      ]);\n      const xaxisLab: string[] = dates.slice();\n      setOptions({ ...options, xaxis: { ...options.xaxis, categories: xaxisLab } });\n    }\n  }, [expenses]);\n\n  return (\n    <SWrapper>\n      <div id=\"chart\">\n        <Chart options={{ ...options }} series={series.slice()} type=\"area\" />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default ExpensesChart;\n","import React, { useEffect, useState, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport Chart from 'react-apexcharts';\nimport { DataContext } from '../../../contexts/DataContext';\n\nconst SWrapper = styled.div`\n  grid-column: 2 / span 1;\n\n  width: 100%;\n  background-color: var(--color-white);\n  padding: 1rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  justify-content: center;\n\n  @media only screen and (min-width: 75em) {\n    grid-column: 3 / span 1;\n    grid-row: 1 / span 2;\n  }\n`;\n\nconst MethodsChart: React.FC = () => {\n  const transactionsList = useContext(DataContext).slice(0, 40);\n  const [methods, setMethods] = useState<{ paypal: number; nonPaypal: number }>({ paypal: 0, nonPaypal: 0 });\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options] = useState({\n    chart: {\n      type: 'bar',\n      width: '100%',\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        startingShape: 'flat',\n        endingShape: 'flat',\n        columnWidth: '20%',\n        barHeight: '70%',\n        rangeBarOverlap: true,\n        rangeBarGroupRows: false,\n      },\n    },\n    legend: {\n      show: false,\n    },\n    stroke: {\n      show: false,\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      categories: ['Paypal', 'Other methods'],\n      axisBorder: {\n        show: false,\n      },\n      axisTicks: {\n        show: false,\n      },\n      crosshairs: {\n        fill: {\n          type: 'gradient',\n          gradient: {\n            colorFrom: '#D8E3F0',\n            colorTo: '#BED1E6',\n            stops: [0, 100],\n            opacityFrom: 0.4,\n            opacityTo: 0.5,\n          },\n        },\n      },\n    },\n    yaxis: {\n      axisBorder: {\n        show: false,\n      },\n      axisTicks: {\n        show: false,\n      },\n      labels: {\n        show: false,\n      },\n    },\n    title: {\n      text: 'No. of purchasesby payment method',\n      align: 'center',\n    },\n  });\n\n  const isActive = useRef(true);\n  useEffect(() => {\n    if (transactionsList.length) {\n      const newMethods: { paypal: number; nonPaypal: number } = { paypal: 0, nonPaypal: 0 };\n      transactionsList.forEach((cur) => {\n        if (cur.paypal) {\n          newMethods.paypal += 1;\n        } else {\n          newMethods.nonPaypal += 1;\n        }\n      });\n\n      if (isActive.current) {\n        setMethods(newMethods);\n      }\n    }\n\n    return () => {\n      isActive.current = false;\n    };\n  }, [transactionsList]);\n\n  useEffect(() => {\n    if (methods) {\n      setSeries([\n        {\n          data: [methods.paypal, methods.nonPaypal],\n        },\n      ]);\n    }\n  }, [methods]);\n\n  return (\n    <SWrapper>\n      <div id=\"chart\">\n        <Chart options={{ ...options }} series={series.slice()} type=\"bar\" height=\"100%\" />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default MethodsChart;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ActivitiesChart from '../../../components/organisms/ActivitiesChart/ActivitiesChart';\nimport CategoriesChart from '../../../components/organisms/CategoriesChart/CategoriesChart';\nimport ExpensesChart from '../../../components/organisms/ExpensesChart/ExpensesChart';\n/* import CountriesChart from '../../../components/organisms/CountriesChart/CountriesChart'; */\nimport MethodsChart from '../../../components/organisms/MethodsChart/MethodsChart';\n\nconst SWrapper = styled.div`\n  display: grid;\n  grid-template-rows: 2fr 3fr;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 1.7rem;\n\n  height: 100%;\n  margin: 0 auto;\n  overflow-y: hidden;\n\n  &:focus,\n  &:active,\n  &:hover {\n    overflow-y: scroll;\n  }\n\n  @media only screen and (max-width: 37.5em) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    grid-gap: 1.7rem;\n\n    & > *:not(:last-child) {\n      margin-bottom: 1.5rem;\n    }\n  }\n\n  @media only screen and (min-width: 75em) {\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: 2fr 2fr 3fr;\n  }\n`;\n\nconst SActivitiesChart = styled(ActivitiesChart)`\n  @media screen and (max-width: 75em) {\n    display: none !important;\n  }\n`;\n\nconst Charts: React.FC = () => (\n  <SWrapper>\n    <CategoriesChart />\n    <MethodsChart />\n    <ExpensesChart />\n    <SActivitiesChart location=\"charts\" />\n  </SWrapper>\n);\n\nexport default Charts;\n"],"sourceRoot":""}