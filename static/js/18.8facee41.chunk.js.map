{"version":3,"sources":["utils/sumSpecMonth.ts","components/organisms/ActivitiesChart/ActivitiesChart.tsx","components/organisms/CategoriesChart/CategoriesChart.tsx","components/organisms/ExpensesChart/ExpensesChart.tsx","components/organisms/MethodsChart/MethodsChart.tsx","views/pages/Charts/Charts.tsx"],"names":["sumSpecMonth","currMonth","currYear","type","stats","sum","currTransaction","get","undefined","expenses","incomes","cancelled","SWrapper","styled","div","ActivitiesChart","className","location","useContext","StatsContext","app","AppContext","useState","dates","setDates","series","setSeries","chart","height","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","legend","position","stroke","show","tooltip","x","xaxis","title","text","categories","yaxis","getCurrencySymbol","currency","min","fill","opacity","colors","options","setOptions","useEffect","isActive","size","newDates","i","currDate","moment","firstDate","toDate","subtract","format","push","slice","xaxisLab","map","curr","join","cur","name","data","toFixed","Typography","variant","color","id","align","transactionsList","DataContext","setCategories","width","labels","newCategories","forEach","includes","category","convertCurrency","parseFloat","amount","currencyRates","purchases","ExpensesChart","setLoading","LoaderDispatchContext","Map","setExpenses","lastDate","getState","useCallback","expensesDaily","datamock","Array","length","date","dateStr","isAfter","isBefore","transactionType","set","from","keys","newExpenses","sort","a","b","diff","MethodsChart","paypal","nonPaypal","methods","setMethods","startingShape","barHeight","rangeBarOverlap","rangeBarGroupRows","axisBorder","axisTicks","crosshairs","gradient","colorFrom","colorTo","stops","opacityFrom","opacityTo","newMethods","SActivitiesChart","Charts","CategoriesChart"],"mappings":"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","file":"static/js/18.8facee41.chunk.js","sourcesContent":["import { statsProps } from '../contexts/StatsContext';\n\nconst sumSpecMonth = (currMonth: string, currYear: string, type: string, stats: statsProps): number => {\n  let sum: number = 0;\n\n  const currTransaction = stats.get(`${currYear}_${currMonth}`);\n  if (currTransaction !== undefined) {\n    switch (type) {\n      case 'expenses':\n        sum += currTransaction.expenses;\n        break;\n      case 'incomes':\n        sum += currTransaction.incomes;\n        break;\n      default:\n        sum += currTransaction.cancelled;\n    }\n  }\n\n  return sum;\n};\n\nexport default sumSpecMonth;\n","import React, { useEffect, useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { Typography } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport { StatsContext } from '../../../contexts/StatsContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { firstDate } from '../../../hooks/useStats';\nimport sumSpecMonth from '../../../utils/sumSpecMonth';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  grid-column: 1 / -1;\n  justify-self: stretch;\n  align-self: center;\n\n  width: 100%;\n  height: 100%;\n  background-color: var(--color-white);\n  padding: 2rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media only screen and (max-width: 37.5em) {\n    max-width: 30rem;\n    justify-self: center;\n  }\n`;\n\nconst ActivitiesChart: React.FC<{ className?: string; location: 'charts' | 'dashboard' }> = ({\n  className,\n  location,\n}) => {\n  const stats = useContext(StatsContext);\n  const app = useContext(AppContext);\n  const [dates, setDates] = useState<[string, string][]>([]);\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'bar',\n      height: '100%',\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '50%',\n        endingShape: 'rounded',\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    legend: {\n      position: 'top',\n    },\n    stroke: {\n      show: false,\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      title: {\n        text: 'month',\n      },\n      categories: [] as string[],\n    },\n    yaxis: {\n      title: {\n        text: `${getCurrencySymbol(app.currency)}`,\n        categories: [],\n      },\n      min: 0,\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: ['#FF7B7D', '#199FE6', '#3A2D96'],\n  });\n\n  useEffect(() => {\n    let isActive = true;\n\n    if (stats.size === 6) {\n      const newDates: [string, string][] = [];\n      for (let i = 0; i < 6; i += 1) {\n        const currDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(i, 'months');\n        const currMonth: string = currDate.format('MMM');\n        const currYear: string = currDate.format('YYYY');\n\n        newDates.push([currMonth, currYear]);\n      }\n\n      if (isActive) {\n        setDates(newDates.slice());\n        const xaxisLab: string[] = newDates.map((curr) => curr.join(' '));\n        setOptions({ ...options, xaxis: { ...options.xaxis, categories: xaxisLab } });\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [stats]);\n\n  useEffect(() => {\n    let isActive = true;\n\n    if (dates) {\n      const cancelled = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'cancelled', stats));\n      const expenses = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'expenses', stats));\n      const incomes = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'incomes', stats));\n\n      if (isActive) {\n        setSeries([\n          {\n            name: 'Cancelled',\n            data: cancelled.map((cur) => cur.toFixed(2)),\n          },\n          {\n            name: 'Expenses',\n            data: expenses.map((cur) => cur.toFixed(2)),\n          },\n          {\n            name: 'Incomes',\n            data: incomes.map((cur) => cur.toFixed(2)),\n          },\n        ]);\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [dates]);\n\n  return (\n    <SWrapper className={className}>\n      {location === 'dashboard' ? (\n        <Typography variant=\"h5\" color=\"textSecondary\">\n          Activities\n        </Typography>\n      ) : null}\n      <div id=\"chart\">\n        <Chart\n          options={\n            location === 'dashboard'\n              ? { ...options }\n              : { ...options, title: { text: 'Last 6 months activities', align: 'center' } }\n          }\n          series={series.slice()}\n          type=\"bar\"\n        />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default ActivitiesChart;\n","import React, { useEffect, useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport Chart from 'react-apexcharts';\nimport { DataContext } from '../../../contexts/DataContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport convertCurrency from '../../../utils/convertCurrency';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  grid-column: 1 / span 1;\n\n  width: 100%;\n  background-color: var(--color-white);\n  padding: 1rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  justify-content: center;\n\n  @media only screen and (min-width: 75em) {\n    grid-column: 1 / span 2;\n  }\n`;\n\nconst ActivitiesChart: React.FC = () => {\n  const app = useContext(AppContext);\n  const transactionsList = useContext(DataContext);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'pie',\n      width: '100%',\n    },\n    title: {\n      text: `Purchases in ${getCurrencySymbol(app.currency)} by category`,\n      align: 'center',\n    },\n    labels: [] as string[],\n    legend: {\n      show: false,\n    },\n  });\n\n  useEffect(() => {\n    let isActive = true;\n\n    const newCategories: string[] = [];\n    transactionsList.forEach((cur) => {\n      if (!newCategories.includes(cur.category)) {\n        newCategories.push(cur.category);\n      }\n    });\n\n    if (isActive) {\n      setCategories(newCategories);\n      setOptions({ ...options, labels: newCategories });\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [transactionsList]);\n\n  useEffect(() => {\n    let isActive = true;\n\n    if (categories) {\n      const newCategories: { [category: string]: number } = {};\n      categories.forEach((cur) => {\n        newCategories[cur] = 0;\n      });\n      transactionsList.forEach((cur) => {\n        newCategories[cur.category] += convertCurrency(\n          parseFloat(cur.amount),\n          cur.currency,\n          app.currency,\n          app.currencyRates\n        );\n      });\n      const purchases: number[] = categories.map((cur) => newCategories[cur]);\n      if (isActive) {\n        setSeries(purchases);\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [categories]);\n\n  return (\n    <SWrapper>\n      <div id=\"chart\">\n        <Chart options={{ ...options }} series={series} type=\"pie\" />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default ActivitiesChart;\n","import React, { useEffect, useState, useCallback, useContext } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Chart from 'react-apexcharts';\nimport { LoaderDispatchContext } from '../../../contexts/LoaderContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { firstDate } from '../../../hooks/useStats';\nimport datamock from '../../../mock/data-mock.json';\nimport convertCurrency from '../../../utils/convertCurrency';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  grid-column: 1 / -1;\n  justify-self: stretch;\n  align-self: center;\n\n  width: 100%;\n  background-color: var(--color-white);\n  padding: 1rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  @media only screen and (min-width: 75em) {\n    grid-column: 1 / span 2;\n    grid-row: 2 / span 1;\n    align-self: stretch;\n  }\n`;\n\nconst ExpensesChart: React.FC = () => {\n  const setLoading = useContext(LoaderDispatchContext);\n  const app = useContext(AppContext);\n  const [expenses, setExpenses] = useState<Map<string, number>>(new Map());\n  const lastDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(1, 'months');\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'area',\n      height: '100%',\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      width: 1,\n    },\n    title: {\n      text: `Last month expenses`,\n      align: 'center',\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      categories: [] as string[],\n    },\n    yaxis: {\n      title: {\n        text: `${getCurrencySymbol(app.currency)}`,\n        categories: [],\n      },\n      min: 0,\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: ['#3A2D96'],\n  });\n\n  const getState = useCallback(\n    (isActive: boolean) => {\n      setLoading(true);\n      const expensesDaily: Map<string, number> = new Map();\n      if (datamock instanceof Array) {\n        let i: number = 0;\n\n        for (i; i < datamock.length; i += 1) {\n          const currDate = moment(datamock[i].date, 'MM/DD/YYYY');\n          const dateStr = currDate.format('DD/MM/YY');\n          if (currDate.isAfter(lastDate) && currDate.isBefore(firstDate) && datamock[i].transactionType === 'expense') {\n            if (expensesDaily.get(dateStr) === undefined) {\n              expensesDaily.set(\n                dateStr,\n                convertCurrency(parseFloat(datamock[i].amount), datamock[i].currency, app.currency, app.currencyRates)\n              );\n            } else {\n              expensesDaily.set(\n                dateStr,\n                expensesDaily.get(dateStr)! +\n                  convertCurrency(parseFloat(datamock[i].amount), datamock[i].currency, app.currency, app.currencyRates)\n              );\n            }\n          }\n          if (isActive) {\n            setExpenses(expensesDaily);\n          }\n        }\n      }\n      setLoading(false);\n    },\n    [datamock]\n  );\n\n  useEffect(() => {\n    let isActive = true;\n\n    getState(isActive);\n\n    return () => {\n      isActive = false;\n    };\n  }, [getState]);\n\n  useEffect(() => {\n    let isActive = true;\n\n    if (expenses.size > 28) {\n      let dates = Array.from(expenses.keys());\n      dates = dates.sort((a, b) => moment(a, 'DD/MM/YY').diff(moment(b, 'DD/MM/YY')));\n      const newExpenses = dates.map((cur) => expenses.get(cur)!);\n      if (isActive) {\n        setSeries([\n          {\n            name: 'Expenses',\n            data: newExpenses.map((cur) => cur.toFixed(2)),\n          },\n        ]);\n        const xaxisLab: string[] = dates.slice();\n        setOptions({ ...options, xaxis: { ...options.xaxis, categories: xaxisLab } });\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [expenses]);\n\n  return (\n    <SWrapper>\n      <div id=\"chart\">\n        <Chart options={{ ...options }} series={series.slice()} type=\"area\" />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default ExpensesChart;\n","import React, { useEffect, useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport Chart from 'react-apexcharts';\nimport { DataContext } from '../../../contexts/DataContext';\n\nconst SWrapper = styled.div`\n  grid-column: 2 / span 1;\n\n  width: 100%;\n  background-color: var(--color-white);\n  padding: 1rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  justify-content: center;\n\n  @media only screen and (min-width: 75em) {\n    grid-column: 3 / span 1;\n    grid-row: 1 / span 2;\n  }\n`;\n\nconst MethodsChart: React.FC = () => {\n  const transactionsList = useContext(DataContext);\n  const [methods, setMethods] = useState<{ paypal: number; nonPaypal: number }>({ paypal: 0, nonPaypal: 0 });\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options] = useState({\n    chart: {\n      type: 'bar',\n      width: '100%',\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        startingShape: 'flat',\n        endingShape: 'flat',\n        columnWidth: '20%',\n        barHeight: '70%',\n        rangeBarOverlap: true,\n        rangeBarGroupRows: false,\n      },\n    },\n    legend: {\n      show: false,\n    },\n    stroke: {\n      show: false,\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      categories: ['Paypal', 'Other methods'],\n      axisBorder: {\n        show: false,\n      },\n      axisTicks: {\n        show: false,\n      },\n      crosshairs: {\n        fill: {\n          type: 'gradient',\n          gradient: {\n            colorFrom: '#D8E3F0',\n            colorTo: '#BED1E6',\n            stops: [0, 100],\n            opacityFrom: 0.4,\n            opacityTo: 0.5,\n          },\n        },\n      },\n    },\n    yaxis: {\n      axisBorder: {\n        show: false,\n      },\n      axisTicks: {\n        show: false,\n      },\n      labels: {\n        show: false,\n      },\n    },\n    title: {\n      text: 'No. of purchases by payment method',\n      align: 'center',\n    },\n  });\n\n  useEffect(() => {\n    let isActive = true;\n\n    const newMethods: { paypal: number; nonPaypal: number } = { paypal: 0, nonPaypal: 0 };\n    transactionsList.forEach((cur) => {\n      if (cur.paypal) {\n        newMethods.paypal += 1;\n      } else {\n        newMethods.nonPaypal += 1;\n      }\n    });\n\n    if (isActive) {\n      setMethods(newMethods);\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [transactionsList]);\n\n  useEffect(() => {\n    let isActive = true;\n\n    if (methods) {\n      if (isActive) {\n        setSeries([\n          {\n            data: [methods.paypal, methods.nonPaypal],\n          },\n        ]);\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [methods]);\n\n  return (\n    <SWrapper>\n      <div id=\"chart\">\n        <Chart options={{ ...options }} series={series.slice()} type=\"bar\" height=\"100%\" />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default MethodsChart;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ActivitiesChart from '../../../components/organisms/ActivitiesChart/ActivitiesChart';\nimport CategoriesChart from '../../../components/organisms/CategoriesChart/CategoriesChart';\nimport ExpensesChart from '../../../components/organisms/ExpensesChart/ExpensesChart';\n/* import CountriesChart from '../../../components/organisms/CountriesChart/CountriesChart'; */\nimport MethodsChart from '../../../components/organisms/MethodsChart/MethodsChart';\n\nconst SWrapper = styled.div`\n  display: grid;\n  grid-template-rows: 2fr 3fr;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 1.7rem;\n\n  height: 100%;\n  margin: 0 auto;\n  overflow-y: hidden;\n\n  &:focus,\n  &:active,\n  &:hover {\n    overflow-y: scroll;\n  }\n\n  @media only screen and (max-width: 37.5em) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  @media only screen and (min-width: 75em) {\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: 2fr 2fr 3fr;\n  }\n`;\n\nconst SActivitiesChart = styled(ActivitiesChart)`\n  @media screen and (max-width: 75em) {\n    display: none !important;\n  }\n`;\n\nconst Charts: React.FC = () => (\n  <SWrapper>\n    <CategoriesChart />\n    <MethodsChart />\n    <ExpensesChart />\n    <SActivitiesChart location=\"charts\" />\n  </SWrapper>\n);\n\nexport default Charts;\n"],"sourceRoot":""}