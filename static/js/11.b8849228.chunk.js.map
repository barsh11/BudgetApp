{"version":3,"sources":["views/pages/MainStyle.js","utils/sumSpecMonth.ts","components/organisms/ActivitiesChart/ActivitiesChart.tsx","components/atoms/CardDate/CardDate.tsx","components/atoms/CardName/CardName.tsx","components/atoms/CardNumber/CardNumber.tsx","assets/images/card.jpg","components/molecules/CreditCard/CreditCard.tsx","components/molecules/DashboardTransactions/DashboardTransactions.tsx","utils/sumLastMonths.ts","components/organisms/IncomesChart/IncomesChart.tsx","views/pages/Dashboard/Dashboard.tsx"],"names":["SWrapper","styled","div","sumSpecMonth","currMonth","currYear","type","stats","sum","currTransaction","get","undefined","expenses","incomes","cancelled","ActivitiesChart","className","location","useContext","StatsContext","app","AppContext","useState","dates","setDates","series","setSeries","chart","height","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","legend","position","stroke","show","tooltip","x","xaxis","title","text","categories","yaxis","getCurrencySymbol","currency","min","fill","opacity","colors","options","setOptions","useEffect","isActive","size","newDates","i","currDate","moment","firstDate","toDate","subtract","format","push","slice","xaxisLab","map","curr","join","cur","name","data","toFixed","Typography","variant","color","id","align","CardDate","cardDate","Box","component","fontWeight","letterSpacing","CardName","cardName","useStyles","makeStyles","numStyle","CardNumber","last4","classes","content","number","strNum","toString","strFull","replace","match","getHiddenNumber","img","SBottomWrapper","CreditCard","ExpenseIcon","React","lazy","IncomeIcon","useStyle","theme","titleStyle","marginBottom","expenseStyle","incomeStyle","palette","primary","main","revenueStyle","grey","A100","iconStyle","borderRadius","padding","backgroundColor","A200","DashboardTransactions","revenue","deposit","formatNumber","capitalize","fallback","FallbackIcon","sumLastmonths","numMonths","parseInt","IncomesChart","setLoading","LoaderDispatchContext","Map","setIncomes","lastDate","width","labels","rotate","trim","getState","useCallback","incomesDaily","datamock","Array","length","date","dateStr","isAfter","isBefore","transactionType","set","convertCurrency","parseFloat","amount","currencyRates","from","keys","newIncomes","sort","a","b","diff","Dashboard","isLoading","LoaderContext","user","UserContext","GeneralLoader","creditCard","last4Digits","expMonth","expYear","firstName","lastName","sumLastMonths"],"mappings":"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","file":"static/js/11.b8849228.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst SWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto;\n  grid-gap: 1.7rem;\n  max-width: 95%;\n  margin: 0 auto;\n  overflow-y: hidden;\n\n  &:focus,\n  &:active,\n  &:hover {\n    overflow-y: scroll;\n  }\n\n  @media only screen and (max-width: 37.5em) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nexport default SWrapper;\n","import { statsProps } from '../contexts/StatsContext';\n\nconst sumSpecMonth = (currMonth: string, currYear: string, type: string, stats: statsProps): number => {\n  let sum: number = 0;\n\n  const currTransaction = stats.get(`${currYear}_${currMonth}`);\n  if (currTransaction !== undefined) {\n    switch (type) {\n      case 'expenses':\n        sum += currTransaction.expenses;\n        break;\n      case 'incomes':\n        sum += currTransaction.incomes;\n        break;\n      default:\n        sum += currTransaction.cancelled;\n    }\n  }\n\n  return sum;\n};\n\nexport default sumSpecMonth;\n","import React, { useEffect, useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { Typography } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport { StatsContext } from '../../../contexts/StatsContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { firstDate } from '../../../hooks/useStats';\nimport sumSpecMonth from '../../../utils/sumSpecMonth';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  grid-column: 1 / -1;\n  justify-self: stretch;\n  align-self: center;\n\n  width: 100%;\n  height: 100%;\n  background-color: var(--color-white);\n  padding: 2rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media only screen and (max-width: 37.5em) {\n    max-width: 30rem;\n    justify-self: center;\n  }\n`;\n\nconst ActivitiesChart: React.FC<{ className?: string; location: 'charts' | 'dashboard' }> = ({\n  className,\n  location,\n}) => {\n  const stats = useContext(StatsContext);\n  const app = useContext(AppContext);\n  const [dates, setDates] = useState<[string, string][]>([]);\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'bar',\n      height: '100%',\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '50%',\n        endingShape: 'rounded',\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    legend: {\n      position: 'top',\n    },\n    stroke: {\n      show: false,\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      title: {\n        text: 'month',\n      },\n      categories: [] as string[],\n    },\n    yaxis: {\n      title: {\n        text: `${getCurrencySymbol(app.currency)}`,\n        categories: [],\n      },\n      min: 0,\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: ['#FF7B7D', '#199FE6', '#3A2D96'],\n  });\n\n  useEffect(() => {\n    let isActive = true;\n\n    if (stats.size === 6) {\n      const newDates: [string, string][] = [];\n      for (let i = 0; i < 6; i += 1) {\n        const currDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(i, 'months');\n        const currMonth: string = currDate.format('MMM');\n        const currYear: string = currDate.format('YYYY');\n\n        newDates.push([currMonth, currYear]);\n      }\n\n      if (isActive) {\n        setDates(newDates.slice());\n        const xaxisLab: string[] = newDates.map((curr) => curr.join(' '));\n        setOptions({ ...options, xaxis: { ...options.xaxis, categories: xaxisLab } });\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [stats]);\n\n  useEffect(() => {\n    let isActive = true;\n\n    if (dates) {\n      const cancelled = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'cancelled', stats));\n      const expenses = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'expenses', stats));\n      const incomes = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'incomes', stats));\n\n      if (isActive) {\n        setSeries([\n          {\n            name: 'Cancelled',\n            data: cancelled.map((cur) => cur.toFixed(2)),\n          },\n          {\n            name: 'Expenses',\n            data: expenses.map((cur) => cur.toFixed(2)),\n          },\n          {\n            name: 'Incomes',\n            data: incomes.map((cur) => cur.toFixed(2)),\n          },\n        ]);\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [dates]);\n\n  return (\n    <SWrapper className={className}>\n      {location === 'dashboard' ? (\n        <Typography variant=\"h5\" color=\"textSecondary\">\n          Activities\n        </Typography>\n      ) : null}\n      <div id=\"chart\">\n        <Chart\n          options={\n            location === 'dashboard'\n              ? { ...options }\n              : { ...options, title: { text: 'Last 6 months activities', align: 'center' } }\n          }\n          series={series.slice()}\n          type=\"bar\"\n        />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default ActivitiesChart;\n","import React from 'react';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport Box, { BoxProps } from '@material-ui/core/Box';\n\nexport type CardDateProps = BoxProps &\n  TypographyProps & {\n    cardDate: string;\n  };\n\nconst CardDate: React.FC<CardDateProps> = ({ cardDate }) => (\n  <Box component=\"div\" fontWeight=\"fontWeightLight\" letterSpacing={2}>\n    <Typography variant=\"subtitle1\" align=\"right\" color=\"textPrimary\">\n      VALID THRU\n    </Typography>\n    <Typography variant=\"h6\" align=\"right\" color=\"textPrimary\">\n      {cardDate}\n    </Typography>\n  </Box>\n);\n\nexport default CardDate;\n","import React from 'react';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport Box, { BoxProps } from '@material-ui/core/Box';\n\nexport type CardNameProps = BoxProps &\n  TypographyProps & {\n    cardName: string;\n  };\n\nconst CardName: React.FC<CardNameProps> = ({ cardName }) => (\n  <Box component=\"div\" fontWeight=\"fontWeightLight\" letterSpacing={2}>\n    <Typography variant=\"subtitle1\" color=\"textPrimary\">\n      CARD HOLDER\n    </Typography>\n    <Typography variant=\"h6\" color=\"textPrimary\">\n      {cardName}\n    </Typography>\n  </Box>\n);\n\nexport default CardName;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\n\nexport type CardNumberProps = TypographyProps & {\n  last4: number;\n};\n\nconst useStyles = makeStyles({\n  numStyle: {\n    letterSpacing: '0.3rem',\n  },\n});\n\nconst getHiddenNumber = (number: number) => {\n  const strNum = number.toString();\n  let strFull = `111111111111${strNum}`;\n  strFull = strFull.replace(/\\d(?=\\d{4})/g, '*');\n  return strFull.match(/.{1,4}/g)?.join(' ');\n};\n\nconst CardNumber: React.FC<CardNumberProps> = ({ last4 }) => {\n  const classes = useStyles();\n  const content = getHiddenNumber(last4);\n\n  return (\n    <Typography className={classes.numStyle} variant=\"h6\" color=\"textPrimary\">\n      {content}\n    </Typography>\n  );\n};\n\nexport default CardNumber;\n","export default __webpack_public_path__ + \"static/media/card.3b32bef8.jpg\";","import React from 'react';\nimport styled from 'styled-components';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport CardDate, { CardDateProps } from '../../atoms/CardDate/CardDate';\nimport CardName, { CardNameProps } from '../../atoms/CardName/CardName';\nimport CardNumber, { CardNumberProps } from '../../atoms/CardNumber/CardNumber';\nimport img from '../../../assets/images/card.jpg';\n\nexport type CreditCardProps = TypographyProps & CardDateProps & CardNameProps & CardNumberProps;\n\nconst SWrapper = styled.div`\n  background-image: url(${img});\n  background-size: cover;\n  background-position: center;\n  padding: 1rem;\n  border-radius: 1rem;\n\n  width: 100%;\n  height: 100%;\n  max-width: 30rem;\n  max-height: 21rem;\n\n  display: grid;\n  grid-template-rows: 3fr 2fr 1fr;\n\n  @media only screen and (max-width: 22em) {\n    max-height: 15rem;\n  }\n`;\n\nconst SBottomWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst CreditCard: React.FC<CreditCardProps> = ({ cardDate, last4, cardName }) => (\n  <SWrapper>\n    <Typography variant=\"h5\" align=\"left\" color=\"textPrimary\">\n      Card\n    </Typography>\n    <CardNumber last4={last4} />\n    <SBottomWrapper>\n      <CardName cardName={cardName} />\n      <CardDate cardDate={cardDate} />\n    </SBottomWrapper>\n  </SWrapper>\n);\n\nexport default CreditCard;\n","import React, { Suspense } from 'react';\nimport styled from 'styled-components';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core';\nimport FallbackIcon from '../../atoms/FallbackIcon/FallbackIcon';\nimport capitalize from '../../../utils/capitalize';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\nimport formatNumber from '../../../utils/formatNumber';\n\nconst ExpenseIcon = React.lazy(() => import('../../atoms/ExpenseIcon/ExpenseIcon'));\nconst IncomeIcon = React.lazy(() => import('../../atoms/IncomeIcon/IncomeIcon'));\n\ntype DashboardTransactionsProps = TypographyProps & {\n  type: 'expense' | 'Income';\n  revenue: number | undefined;\n  currency: string;\n};\n\nconst useStyle = makeStyles((theme) => ({\n  titleStyle: {\n    marginBottom: '3rem',\n  },\n  expenseStyle: {\n    color: 'var(--color-forthtiary)',\n  },\n  incomeStyle: {\n    color: theme.palette.primary.main,\n  },\n  revenueStyle: {\n    color: theme.palette.grey.A100,\n  },\n  iconStyle: {\n    borderRadius: '50%',\n    padding: '0.3rem',\n    backgroundColor: (type) => (type === 'expense' ? 'var(--color-forthtiary)' : theme.palette.primary.main),\n    fill: theme.palette.grey.A200,\n  },\n}));\n\nconst SWrapper = styled.div`\n  background-color: var(--color-white);\n  padding: 2rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  width: 100%;\n  height: 100%;\n  max-width: 30rem;\n  max-height: 15rem;\n\n  align-self: center;\n`;\n\nconst SBottomWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst DashboardTransactions: React.FC<DashboardTransactionsProps> = ({ type, revenue, currency }) => {\n  const classes = useStyle({ type });\n  const deposit = `${getCurrencySymbol(currency)}${revenue && formatNumber(revenue)}`;\n\n  return (\n    <SWrapper>\n      <Typography className={classes.titleStyle} variant=\"h5\" color=\"textSecondary\">\n        {`${capitalize(type)}s`}\n      </Typography>\n      <Typography className={classes.revenueStyle} variant=\"subtitle1\">\n        Revenue\n      </Typography>\n      <SBottomWrapper>\n        <Typography\n          className={type === 'expense' ? classes.expenseStyle : classes.incomeStyle}\n          variant=\"h3\"\n          align=\"left\"\n        >\n          {deposit}\n        </Typography>\n        <Suspense fallback={<FallbackIcon location=\"dashboard\" />}>\n          {type === 'expense' ? <ExpenseIcon location=\"dashboard\" /> : <IncomeIcon />}\n        </Suspense>\n      </SBottomWrapper>\n    </SWrapper>\n  );\n};\n\nexport default DashboardTransactions;\n","import moment from 'moment';\nimport { statsProps } from '../contexts/StatsContext';\nimport { firstDate } from '../hooks/useStats';\n\nconst sumLastmonths = (numMonths: number, type: string, stats: statsProps): number => {\n  let sum: number = 0;\n\n  for (let i = 0; i <= numMonths; i += 1) {\n    const currDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(i, 'months');\n\n    const currMonth = currDate.format('MMM');\n    const currYear = parseInt(currDate.format('YYYY'), 10);\n\n    const currTransaction = stats.get(`${currYear}_${currMonth}`);\n    if (currTransaction !== undefined) {\n      switch (type) {\n        case 'expenses':\n          sum += currTransaction.expenses;\n          break;\n        case 'incomes':\n          sum += currTransaction.incomes;\n          break;\n        default:\n          sum += currTransaction.cancelled;\n      }\n    }\n  }\n\n  return sum;\n};\n\nexport default sumLastmonths;\n","import React, { useEffect, useState, useCallback, useContext } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { Typography } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport { LoaderDispatchContext } from '../../../contexts/LoaderContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { firstDate } from '../../../hooks/useStats';\nimport datamock from '../../../mock/data-mock.json';\nimport convertCurrency from '../../../utils/convertCurrency';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  justify-self: stretch;\n\n  width: 100%;\n  height: 100%;\n  max-width: 30rem;\n  max-height: 21rem;\n  background-color: var(--color-white);\n  padding: 1rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media only screen and (max-width: 37.5em) {\n    justify-self: center;\n  }\n`;\n\nconst IncomesChart: React.FC = () => {\n  const setLoading = useContext(LoaderDispatchContext);\n  const app = useContext(AppContext);\n  const [incomes, setIncomes] = useState<Map<string, number>>(new Map());\n  const lastDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(1, 'months');\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'area',\n      height: '100%',\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      width: 1,\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      categories: [] as string[],\n      labels: {\n        rotate: 0,\n        trim: true,\n      },\n    },\n    yaxis: {\n      title: {\n        text: `${getCurrencySymbol(app.currency)}`,\n        categories: [],\n      },\n      min: 0,\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: ['#3A2D96'],\n  });\n\n  const getState = useCallback(\n    (isActive: boolean) => {\n      setLoading(true);\n      const incomesDaily: Map<string, number> = new Map();\n      if (datamock instanceof Array) {\n        let i: number = 0;\n\n        for (i; i < datamock.length; i += 1) {\n          const currDate = moment(datamock[i].date, 'MM/DD/YYYY');\n          const dateStr = currDate.format('DD/MM/YY');\n          if (currDate.isAfter(lastDate) && currDate.isBefore(firstDate) && datamock[i].transactionType === 'Income') {\n            if (incomesDaily.get(dateStr) === undefined) {\n              incomesDaily.set(\n                dateStr,\n                convertCurrency(parseFloat(datamock[i].amount), datamock[i].currency, app.currency, app.currencyRates)\n              );\n            } else {\n              incomesDaily.set(\n                dateStr,\n                incomesDaily.get(dateStr)! +\n                  convertCurrency(parseFloat(datamock[i].amount), datamock[i].currency, app.currency, app.currencyRates)\n              );\n            }\n          }\n          if (isActive) {\n            setIncomes(incomesDaily);\n          }\n        }\n      }\n      setLoading(false);\n    },\n    [datamock]\n  );\n\n  useEffect(() => {\n    let isActive = true;\n\n    getState(isActive);\n\n    return () => {\n      isActive = false;\n    };\n  }, [getState]);\n\n  useEffect(() => {\n    let isActive = true;\n\n    if (incomes.size > 28) {\n      let dates = Array.from(incomes.keys());\n      dates = dates.sort((a, b) => moment(a, 'DD/MM/YY').diff(moment(b, 'DD/MM/YY')));\n      const newIncomes = dates.map((cur) => incomes.get(cur)!);\n      if (isActive) {\n        setSeries([\n          {\n            name: 'Incomes',\n            data: newIncomes.map((cur) => cur.toFixed(2)),\n          },\n        ]);\n        const xaxisLab: string[] = dates.slice();\n        setOptions({ ...options, xaxis: { ...options.xaxis, categories: xaxisLab } });\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [incomes]);\n\n  return (\n    <SWrapper>\n      <Typography variant=\"h5\" color=\"textSecondary\">\n        Incomes\n      </Typography>\n      <div id=\"chart\">\n        <Chart options={{ ...options }} series={series.slice()} type=\"area\" />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default IncomesChart;\n","import React, { useContext } from 'react';\nimport CreditCard from '../../../components/molecules/CreditCard/CreditCard';\nimport { UserContext } from '../../../contexts/UserContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { LoaderContext } from '../../../contexts/LoaderContext';\nimport { StatsContext } from '../../../contexts/StatsContext';\nimport SWrapper from '../MainStyle';\nimport GeneralLoader from '../../../components/organisms/GeneralLoader/GeneralLoader';\nimport DashboardTransactions from '../../../components/molecules/DashboardTransactions/DashboardTransactions';\nimport sumLastMonths from '../../../utils/sumLastMonths';\nimport IncomesChart from '../../../components/organisms/IncomesChart/IncomesChart';\nimport ActivitiesChart from '../../../components/organisms/ActivitiesChart/ActivitiesChart';\n\nconst Dashboard: React.FC = () => {\n  const app = useContext(AppContext);\n  const isLoading = useContext(LoaderContext);\n  const user = useContext(UserContext);\n  const stats = useContext(StatsContext);\n\n  return (\n    <SWrapper>\n      {isLoading ? <GeneralLoader /> : null}\n      <CreditCard\n        last4={user.creditCard.last4Digits}\n        cardDate={`${user.creditCard.expMonth}/${user.creditCard.expYear}`}\n        cardName={`${user.firstName} ${user.lastName}`}\n      />\n      <IncomesChart />\n      <DashboardTransactions type=\"expense\" currency={app.currency} revenue={sumLastMonths(3, 'expenses', stats)} />\n      <DashboardTransactions type=\"Income\" currency={app.currency} revenue={sumLastMonths(3, 'incomes', stats)} />\n      <ActivitiesChart location=\"dashboard\" />\n    </SWrapper>\n  );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}