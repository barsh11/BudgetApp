{"version":3,"sources":["views/pages/MainStyle.js","utils/sumSpecMonth.ts","components/organisms/ActivitiesChart/ActivitiesChart.tsx","components/atoms/CardDate/CardDate.tsx","components/atoms/CardName/CardName.tsx","components/atoms/CardNumber/CardNumber.tsx","assets/images/card.jpg","components/molecules/CreditCard/CreditCard.tsx","components/molecules/DashboardTransactions/DashboardTransactions.tsx","utils/sumLastMonths.ts","components/organisms/IncomesChart/IncomesChart.tsx","views/pages/Dashboard/Dashboard.tsx"],"names":["SWrapper","styled","div","sumSpecMonth","currMonth","currYear","type","stats","sum","currTransaction","get","undefined","expenses","incomes","cancelled","ActivitiesChart","className","location","useContext","StatsContext","app","AppContext","transactionsList","DataContext","useState","dates","setDates","series","setSeries","chart","height","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","legend","position","stroke","show","tooltip","x","xaxis","title","text","categories","yaxis","getCurrencySymbol","currency","min","fill","opacity","colors","options","setOptions","useEffect","size","length","newDates","firstDate","moment","date","i","currDate","toDate","subtract","format","push","slice","xaxisLab","map","curr","join","cur","name","data","toFixed","Typography","variant","color","id","align","CardDate","cardDate","Box","component","fontWeight","letterSpacing","CardName","cardName","useStyles","makeStyles","numStyle","CardNumber","last4","classes","content","number","strNum","toString","strFull","replace","match","getHiddenNumber","img","SBottomWrapper","CreditCard","ExpenseIcon","React","lazy","IncomeIcon","useStyle","theme","titleStyle","marginBottom","expenseStyle","incomeStyle","palette","primary","main","revenueStyle","grey","A100","iconStyle","borderRadius","padding","backgroundColor","A200","DashboardTransactions","revenue","deposit","formatNumber","capitalize","fallback","FallbackIcon","sumLastmonths","numMonths","parseInt","IncomesChart","Map","setIncomes","width","getState","useCallback","isActive","incomesDaily","lastDate","dateStr","isAfter","isBefore","transactionType","set","convertCurrency","parseFloat","amount","currencyRates","useRef","current","Array","from","keys","newIncomes","sort","a","b","diff","Dashboard","user","UserContext","creditCard","last4Digits","expMonth","expYear","firstName","lastName","sumLastMonths"],"mappings":"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","file":"static/js/12.b4d0ae82.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst SWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: min-content;\n  align-content: start;\n  grid-gap: 1.5rem;\n  grid-row-gap: 2.5rem;\n  align-items: center;\n  max-width: 95%;\n  height: 100%;\n  margin: 0 auto;\n  overflow-y: hidden;\n\n  &:focus,\n  &:active,\n  &:hover {\n    overflow-y: scroll;\n  }\n\n  @media only screen and (max-width: 37.5em) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    grid-gap: 0;\n\n    & > *:not(:last-child) {\n      margin-bottom: 1.5rem;\n    }\n  }\n`;\n\nexport default SWrapper;\n","import { statsProps } from '../contexts/StatsContext';\n\nconst sumSpecMonth = (currMonth: string, currYear: string, type: string, stats: statsProps): number => {\n  let sum: number = 0;\n\n  const currTransaction = stats.get(`${currYear}_${currMonth}`);\n  if (currTransaction !== undefined) {\n    switch (type) {\n      case 'expenses':\n        sum += currTransaction.expenses;\n        break;\n      case 'incomes':\n        sum += currTransaction.incomes;\n        break;\n      default:\n        sum += currTransaction.cancelled;\n    }\n  }\n\n  return sum;\n};\n\nexport default sumSpecMonth;\n","import React, { useEffect, useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { Typography } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport { StatsContext } from '../../../contexts/StatsContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { DataContext } from '../../../contexts/DataContext';\nimport sumSpecMonth from '../../../utils/sumSpecMonth';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  grid-column: 1 / -1;\n  justify-self: stretch;\n  align-self: center;\n\n  width: 100%;\n  height: 100%;\n  background-color: var(--color-white);\n  padding: 2rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media only screen and (max-width: 37.5em) {\n    display: none;\n  }\n`;\n\nconst ActivitiesChart: React.FC<{ className?: string; location: 'charts' | 'dashboard' }> = ({\n  className,\n  location,\n}) => {\n  const stats = useContext(StatsContext);\n  const app = useContext(AppContext);\n  const transactionsList = useContext(DataContext);\n  const [dates, setDates] = useState<[string, string][]>([]);\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'bar',\n      height: '100%',\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '50%',\n        endingShape: 'rounded',\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    legend: {\n      position: 'top',\n    },\n    stroke: {\n      show: false,\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      title: {\n        text: 'month',\n      },\n      categories: [] as string[],\n    },\n    yaxis: {\n      title: {\n        text: `${getCurrencySymbol(app.currency)}`,\n        categories: [],\n      },\n      min: 0,\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: ['#FF7B7D', '#199FE6', '#3A2D96'],\n  });\n\n  useEffect(() => {\n    if (stats.size && transactionsList.length) {\n      const newDates: [string, string][] = [];\n      const firstDate = moment(transactionsList[0].date, 'MM/DD/YYYY');\n\n      for (let i = 0; i < stats.size; i += 1) {\n        const currDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(i, 'months');\n        const currMonth: string = currDate.format('MMM');\n        const currYear: string = currDate.format('YYYY');\n\n        newDates.push([currMonth, currYear]);\n      }\n\n      setDates(newDates.slice());\n      const xaxisLab: string[] = newDates.map((curr) => curr.join(' '));\n      setOptions({ ...options, xaxis: { ...options.xaxis, categories: xaxisLab } });\n    }\n  }, [stats]);\n\n  useEffect(() => {\n    if (dates.length) {\n      const cancelled = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'cancelled', stats));\n      const expenses = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'expenses', stats));\n      const incomes = dates.map((cur) => sumSpecMonth(cur[0], cur[1], 'incomes', stats));\n\n      setSeries([\n        {\n          name: 'Cancelled',\n          data: cancelled.map((cur) => cur.toFixed(2)),\n        },\n        {\n          name: 'Expenses',\n          data: expenses.map((cur) => cur.toFixed(2)),\n        },\n        {\n          name: 'Incomes',\n          data: incomes.map((cur) => cur.toFixed(2)),\n        },\n      ]);\n    }\n  }, [dates]);\n\n  return (\n    <SWrapper className={className}>\n      {location === 'dashboard' ? (\n        <Typography variant=\"h5\" color=\"textSecondary\">\n          Activities\n        </Typography>\n      ) : null}\n      <div id=\"chart\">\n        <Chart\n          options={\n            location === 'dashboard'\n              ? { ...options }\n              : { ...options, title: { text: 'Last 6 months activities', align: 'center' } }\n          }\n          series={series.slice()}\n          type=\"bar\"\n        />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default ActivitiesChart;\n","import React from 'react';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport Box, { BoxProps } from '@material-ui/core/Box';\n\nexport type CardDateProps = BoxProps &\n  TypographyProps & {\n    cardDate: string;\n  };\n\nconst CardDate: React.FC<CardDateProps> = ({ cardDate }) => (\n  <Box component=\"div\" fontWeight=\"fontWeightLight\" letterSpacing={2}>\n    <Typography variant=\"subtitle1\" align=\"right\" color=\"textPrimary\">\n      VALID THRU\n    </Typography>\n    <Typography variant=\"h6\" align=\"right\" color=\"textPrimary\">\n      {cardDate}\n    </Typography>\n  </Box>\n);\n\nexport default CardDate;\n","import React from 'react';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport Box, { BoxProps } from '@material-ui/core/Box';\n\nexport type CardNameProps = BoxProps &\n  TypographyProps & {\n    cardName: string;\n  };\n\nconst CardName: React.FC<CardNameProps> = ({ cardName }) => (\n  <Box component=\"div\" fontWeight=\"fontWeightLight\" letterSpacing={2}>\n    <Typography variant=\"subtitle1\" color=\"textPrimary\">\n      CARD HOLDER\n    </Typography>\n    <Typography variant=\"h6\" color=\"textPrimary\">\n      {cardName}\n    </Typography>\n  </Box>\n);\n\nexport default CardName;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\n\nexport type CardNumberProps = TypographyProps & {\n  last4: number;\n};\n\nconst useStyles = makeStyles({\n  numStyle: {\n    letterSpacing: '0.3rem',\n  },\n});\n\nconst getHiddenNumber = (number: number) => {\n  const strNum = number.toString();\n  let strFull = `111111111111${strNum}`;\n  strFull = strFull.replace(/\\d(?=\\d{4})/g, '*');\n  return strFull.match(/.{1,4}/g)?.join(' ');\n};\n\nconst CardNumber: React.FC<CardNumberProps> = ({ last4 }) => {\n  const classes = useStyles();\n  const content = getHiddenNumber(last4);\n\n  return (\n    <Typography className={classes.numStyle} variant=\"h6\" color=\"textPrimary\">\n      {content}\n    </Typography>\n  );\n};\n\nexport default CardNumber;\n","export default __webpack_public_path__ + \"static/media/card.3b32bef8.jpg\";","import React from 'react';\nimport styled from 'styled-components';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport CardDate, { CardDateProps } from '../../atoms/CardDate/CardDate';\nimport CardName, { CardNameProps } from '../../atoms/CardName/CardName';\nimport CardNumber, { CardNumberProps } from '../../atoms/CardNumber/CardNumber';\nimport img from '../../../assets/images/card.jpg';\n\nexport type CreditCardProps = TypographyProps & CardDateProps & CardNameProps & CardNumberProps;\n\nconst SWrapper = styled.div`\n  background-image: url(${img});\n  background-size: cover;\n  background-position: center;\n  padding: 1rem;\n  border-radius: 1rem;\n\n  width: 100%;\n  height: 100%;\n  max-width: 30rem;\n  max-height: 18rem;\n\n  display: grid;\n  grid-template-rows: 3fr 2fr 1fr;\n\n  @media only screen and (max-width: 22em) {\n    max-height: 15rem;\n  }\n`;\n\nconst SBottomWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst CreditCard: React.FC<CreditCardProps> = ({ cardDate, last4, cardName }) => (\n  <SWrapper>\n    <Typography variant=\"h5\" align=\"left\" color=\"textPrimary\">\n      Card\n    </Typography>\n    <CardNumber last4={last4} />\n    <SBottomWrapper>\n      <CardName cardName={cardName} />\n      <CardDate cardDate={cardDate} />\n    </SBottomWrapper>\n  </SWrapper>\n);\n\nexport default CreditCard;\n","import React, { Suspense } from 'react';\nimport styled from 'styled-components';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core';\nimport FallbackIcon from '../../atoms/FallbackIcon/FallbackIcon';\nimport capitalize from '../../../utils/capitalize';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\nimport formatNumber from '../../../utils/formatNumber';\n\nconst ExpenseIcon = React.lazy(() => import('../../atoms/ExpenseIcon/ExpenseIcon'));\nconst IncomeIcon = React.lazy(() => import('../../atoms/IncomeIcon/IncomeIcon'));\n\ntype DashboardTransactionsProps = TypographyProps & {\n  type: 'expense' | 'Income';\n  revenue: number | undefined;\n  currency: string;\n};\n\nconst useStyle = makeStyles((theme) => ({\n  titleStyle: {\n    marginBottom: '3rem',\n  },\n  expenseStyle: {\n    color: 'var(--color-forthtiary)',\n  },\n  incomeStyle: {\n    color: theme.palette.primary.main,\n  },\n  revenueStyle: {\n    color: theme.palette.grey.A100,\n  },\n  iconStyle: {\n    borderRadius: '50%',\n    padding: '0.3rem',\n    backgroundColor: (type) => (type === 'expense' ? 'var(--color-forthtiary)' : theme.palette.primary.main),\n    fill: theme.palette.grey.A200,\n  },\n}));\n\nconst SWrapper = styled.div`\n  background-color: var(--color-white);\n  padding: 2rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  width: 100%;\n  height: 100%;\n  max-width: 30rem;\n  max-height: 15rem;\n\n  align-self: center;\n`;\n\nconst SBottomWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst DashboardTransactions: React.FC<DashboardTransactionsProps> = ({ type, revenue, currency }) => {\n  const classes = useStyle({ type });\n  const deposit = `${getCurrencySymbol(currency)}${revenue && formatNumber(revenue)}`;\n\n  return (\n    <SWrapper>\n      <Typography className={classes.titleStyle} variant=\"h5\" color=\"textSecondary\">\n        {`${capitalize(type)}s`}\n      </Typography>\n      <Typography className={classes.revenueStyle} variant=\"subtitle1\">\n        Revenue\n      </Typography>\n      <SBottomWrapper>\n        <Typography\n          className={type === 'expense' ? classes.expenseStyle : classes.incomeStyle}\n          variant=\"h3\"\n          align=\"left\"\n        >\n          {deposit}\n        </Typography>\n        <Suspense fallback={<FallbackIcon location=\"dashboard\" />}>\n          {type === 'expense' ? <ExpenseIcon location=\"dashboard\" /> : <IncomeIcon />}\n        </Suspense>\n      </SBottomWrapper>\n    </SWrapper>\n  );\n};\n\nexport default DashboardTransactions;\n","import moment from 'moment';\nimport { statsProps } from '../contexts/StatsContext';\n\nconst sumLastmonths = (numMonths: number, type: string, stats: statsProps, date: string): number => {\n  let sum: number = 0;\n  const firstDate = moment(date, 'MM/DD/YYYY');\n\n  for (let i = 0; i <= numMonths; i += 1) {\n    const currDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(i, 'months');\n\n    const currMonth = currDate.format('MMM');\n    const currYear = parseInt(currDate.format('YYYY'), 10);\n\n    const currTransaction = stats.get(`${currYear}_${currMonth}`);\n    if (currTransaction !== undefined) {\n      switch (type) {\n        case 'expenses':\n          sum += currTransaction.expenses;\n          break;\n        case 'incomes':\n          sum += currTransaction.incomes;\n          break;\n        default:\n          sum += currTransaction.cancelled;\n      }\n    }\n  }\n\n  return sum;\n};\n\nexport default sumLastmonths;\n","import React, { useEffect, useState, useCallback, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { Typography } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { DataContext } from '../../../contexts/DataContext';\nimport convertCurrency from '../../../utils/convertCurrency';\nimport getCurrencySymbol from '../../../utils/getCurrencySymbol';\n\nconst SWrapper = styled.div`\n  justify-self: stretch;\n\n  width: 100%;\n  height: 100%;\n  max-width: 30rem;\n  max-height: 19rem;\n  background-color: var(--color-white);\n  padding: 1rem;\n  border-radius: 1rem;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media only screen and (max-width: 37.5em) {\n    justify-self: center;\n  }\n`;\n\nconst IncomesChart: React.FC = () => {\n  const app = useContext(AppContext);\n  const transactionsList = useContext(DataContext);\n  const [incomes, setIncomes] = useState<Map<string, number>>(new Map());\n  const [series, setSeries] = useState<{}[]>([]);\n  const [options, setOptions] = useState({\n    chart: {\n      type: 'area',\n      height: '100%',\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      width: 1,\n    },\n    tooltip: {\n      enabled: true,\n      x: {\n        show: false,\n      },\n    },\n    xaxis: {\n      categories: [] as string[],\n    },\n    yaxis: {\n      title: {\n        text: `${getCurrencySymbol(app.currency)}`,\n        categories: [],\n      },\n      min: 0,\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: ['#3A2D96'],\n  });\n\n  const getState = useCallback(\n    (isActive: boolean) => {\n      const incomesDaily: Map<string, number> = new Map();\n\n      if (transactionsList.length) {\n        const firstDate = moment(transactionsList[0].date, 'MM/DD/YYYY');\n        const lastDate = moment(firstDate.toDate(), 'MM/DD/YYYY').subtract(1, 'months');\n        let i: number = 0;\n\n        for (i; i < transactionsList.length; i += 1) {\n          const currDate = moment(transactionsList[i].date, 'MM/DD/YYYY');\n          const dateStr = currDate.format('DD/MM/YY');\n          if (\n            currDate.isAfter(lastDate) &&\n            currDate.isBefore(firstDate) &&\n            transactionsList[i].transactionType === 'Income'\n          ) {\n            if (incomesDaily.get(dateStr) === undefined) {\n              incomesDaily.set(\n                dateStr,\n                convertCurrency(\n                  parseFloat(transactionsList[i].amount),\n                  transactionsList[i].currency,\n                  app.currency,\n                  app.currencyRates\n                )\n              );\n            } else {\n              incomesDaily.set(\n                dateStr,\n                incomesDaily.get(dateStr)! +\n                  convertCurrency(\n                    parseFloat(transactionsList[i].amount),\n                    transactionsList[i].currency,\n                    app.currency,\n                    app.currencyRates\n                  )\n              );\n            }\n          }\n        }\n        if (isActive) {\n          setIncomes(incomesDaily);\n        }\n      }\n    },\n    [transactionsList]\n  );\n\n  const isActive = useRef(true);\n  useEffect(() => {\n    getState(isActive.current);\n\n    return () => {\n      isActive.current = false;\n    };\n  }, [getState]);\n\n  useEffect(() => {\n    if (incomes.size) {\n      let dates = Array.from(incomes.keys());\n      dates = dates.sort((a, b) => moment(a, 'DD/MM/YY').diff(moment(b, 'DD/MM/YY')));\n      const newIncomes = dates.map((cur) => incomes.get(cur)!);\n\n      setSeries([\n        {\n          name: 'Incomes',\n          data: newIncomes.map((cur) => cur.toFixed(2)),\n        },\n      ]);\n      const xaxisLab: string[] = dates.slice();\n      setOptions({ ...options, xaxis: { ...options.xaxis, categories: xaxisLab } });\n    }\n  }, [incomes]);\n\n  return (\n    <SWrapper>\n      <Typography variant=\"h5\" color=\"textSecondary\">\n        Incomes\n      </Typography>\n      <div id=\"chart\">\n        <Chart options={{ ...options }} series={series.slice()} type=\"area\" />\n      </div>\n    </SWrapper>\n  );\n};\n\nexport default IncomesChart;\n","import React, { useContext } from 'react';\nimport CreditCard from '../../../components/molecules/CreditCard/CreditCard';\nimport { UserContext } from '../../../contexts/UserContext';\nimport { AppContext } from '../../../contexts/AppContext';\nimport { DataContext } from '../../../contexts/DataContext';\nimport { StatsContext } from '../../../contexts/StatsContext';\nimport SWrapper from '../MainStyle';\nimport DashboardTransactions from '../../../components/molecules/DashboardTransactions/DashboardTransactions';\nimport sumLastMonths from '../../../utils/sumLastMonths';\nimport IncomesChart from '../../../components/organisms/IncomesChart/IncomesChart';\nimport ActivitiesChart from '../../../components/organisms/ActivitiesChart/ActivitiesChart';\n\nconst Dashboard: React.FC = () => {\n  const app = useContext(AppContext);\n  const user = useContext(UserContext);\n  const stats = useContext(StatsContext);\n  const firstDate = useContext(DataContext).slice()[0].date;\n\n  return (\n    <SWrapper>\n      <CreditCard\n        last4={user.creditCard.last4Digits}\n        cardDate={`${user.creditCard.expMonth}/${user.creditCard.expYear}`}\n        cardName={`${user.firstName} ${user.lastName}`}\n      />\n      <IncomesChart />\n      <DashboardTransactions\n        type=\"expense\"\n        currency={app.currency}\n        revenue={sumLastMonths(3, 'expenses', stats, firstDate)}\n      />\n      <DashboardTransactions\n        type=\"Income\"\n        currency={app.currency}\n        revenue={sumLastMonths(3, 'incomes', stats, firstDate)}\n      />\n      <ActivitiesChart location=\"dashboard\" />\n    </SWrapper>\n  );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}